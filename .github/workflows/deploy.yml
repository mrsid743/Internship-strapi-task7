# This GitHub Actions workflow handles the deployment of a Dockerized application
# to Amazon ECS using a blue/green strategy managed by AWS CodeDeploy.

name: Deploy to AWS ECS via CodeDeploy

# Trigger the workflow on a push to the main branch
on:
  push:
    branches:
      - main

# Environment variables available to all jobs and steps in the workflow
env:
  AWS_REGION: ap-south-1                   # AWS Region (Mumbai)
  ECR_REPOSITORY: siddhant-strapi   # Replace with your ECR repository name
  ECS_CLUSTER_NAME: strapi-bluegreen-cluster         # Replace with your ECS cluster name
  ECS_SERVICE_NAME: strapi-bluegreen-strapi-app         # Replace with your ECS service name
  ECS_TASK_DEFINITION_FAMILY: strapi-task  # The family of your task definition
  CODEDEPLOY_APP_NAME: strapi-bluegreen-strapi-app # Replace with your CodeDeploy application name
  CODEDEPLOY_DEPLOYMENT_GROUP_NAME: strapi-bluegreen-deployment-group # Replace with your CodeDeploy deployment group

jobs:
  deploy:
    name: Build, Push, and Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read # Allow the job to read the repository content

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set image tag to commit SHA
        id: image
        run: echo "IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-8)" >> $GITHUB_ENV

      - name: Build, tag, and push image to Amazon ECR
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          echo "ECR_IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}" >> $GITHUB_ENV

      - name: Download existing task definition
        id: task-def
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION_FAMILY }} --query taskDefinition > task-definition.json
          echo "TASK_DEF_ARN=$(jq -r '.taskDefinitionArn' task-definition.json)" >> $GITHUB_ENV

      - name: Create new task definition with updated image
        id: new-task-def
        run: |
          jq '.containerDefinitions[0].image = "${{ env.ECR_IMAGE_URI }}"' task-definition.json > new-task-definition.json
          jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' new-task-definition.json > final-task-definition.json
          
          NEW_TASK_INFO=$(aws ecs register-task-definition --cli-input-json file://final-task-definition.json)
          NEW_TASK_DEF_ARN=$(echo "$NEW_TASK_INFO" | jq -r '.taskDefinition.taskDefinitionArn')
          echo "NEW_TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Create CodeDeploy deployment
        id: deploy
        run: |
          # Create the AppSpec content file
          cat > appspec.json <<EOF
          {
            "version": 1,
            "Resources": [
              {
                "TargetService": {
                  "Type": "AWS::ECS::Service",
                  "Properties": {
                    "TaskDefinition": "${{ env.NEW_TASK_DEF_ARN }}",
                    "LoadBalancerInfo": {
                       "ContainerName": "strapi-container",
                       "ContainerPort": 1337
                    }
                  }
                }
              }
            ]
          }
          EOF

          # Use jq to properly format the AppSpec content as a valid JSON string
          ESCAPED_APPSPEC_CONTENT=$(jq -R -s '.' < appspec.json)

          # Create the full JSON input for the create-deployment command
          cat > deployment-input.json <<EOF
          {
              "applicationName": "${{ env.CODEDEPLOY_APP_NAME }}",
              "deploymentGroupName": "${{ env.CODEDEPLOY_DEPLOYMENT_GROUP_NAME }}",
              "revision": {
                  "revisionType": "AppSpecContent",
                  "appSpecContent": {
                      "content": $ESCAPED_APPSPEC_CONTENT
                  }
              }
          }
          EOF

          # Start the deployment using the generated input file
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --cli-input-json file://deployment-input.json \
            --query '[deploymentId]' --output text)
          
          echo "DEPLOYMENT_ID=$DEPLOYMENT_ID" >> $GITHUB_ENV

      - name: Monitor deployment status
        run: |
          echo "Deployment started with ID: ${{ env.DEPLOYMENT_ID }}"
          echo "Waiting for deployment to complete..."
          aws deploy wait deployment-successful --deployment-id ${{ env.DEPLOYMENT_ID }}
          echo "Deployment successful!"

